what is an enum in Rust?
when do we use enums or structs in Rust?

1.Struct = a fixed blueprint. Every instance has all fields, always.

2.Enum = a choice. Each instance is exactly one variant, never more.

Why does Rust have enums? Because sometimes you don’t want all fields at once — you want a value that can be in one of several states, safely.

Here’s why it’s useful:
Safer than strings or numbers
In other languages, you might represent “status” as a string: "Pending", "Completed", "Failed".
Typos happen. Rust enums prevent that: you can only choose one of the defined variants.
Clear intent in code

When a function takes a Message, you know exactly which variants it can handle.
The compiler checks that you cover all possible cases (using match).

Attach data per variant
Some variants might need extra info, some don’t. You can mix and match without making fields optional.
enum Message {
    Quit,                     // no data
    Move { x: i32, y: i32 },  // structured data
    Write(String),             // a single value
}


Pattern matching makes logic safe and readable
match msg {
    Message::Quit => println!("Quit!"),
    Message::Move { x, y } => println!("Move to ({x},{y})"),
    Message::Write(text) => println!("Write: {text}"),
}

The compiler will warn you if you forget a variant. You cannot silently ignore a case, unlike using numbers or strings.

So enums exist to model “exactly one of these possibilities” in a way that’s safe, clear, and checked at compile time. 
and match will decide what will happen based on the variant enum returns.